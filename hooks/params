#!/bin/bash

source "$(dirname "$0")/params_helper"

cat <<EOF
$(color "User Access List" y)

You can optionally specify a list of users along with their shell,
environment repo and ssh public keys that will be set up on the
jumpbox.  Enter a blank user name to stop adding users.
EOF

add_users=true
default=1
read -r -d '' user_comment <<'EOF'
List of users that will be created on the jumpbox.  For each user,
provide the following hash values in a list item:
  name:     unix name of the user; 1 to 31 lowercase alphanumeric
            characters, starting with a letter (can also contain
            underscore or dash after first letter)

  shell:    shell for the user to use: one of /bin/bash, /bin/zsh,
            /bin/ksh, /bin/sh, /bin/tcsh, /bin/tsh, /bin/csh, or
            /sbin/nologin

  env:      (optional) If the user has an environment repo, add it
            here to be automatically include it for the user. Specify
            the full url of repo, including the protocol.

  ssh-keys: One or more ssh-keys to allow the user to log in without
            password.

EOF

# Check if there are any users defined
unset IFS
users_json="$($GENESIS lookup "params.users" "$GENESIS_ENVIRONMENT_NAME" "[]")"
user_names=( $(jq -r '.[] | .name' <<<"$users_json" ) )
if [[ "${#user_names[@]}" -gt 0 ]] ; then
	printf "\nFound profiles for the following users:\n"
	printf -- "- %s\n" "${user_names[@]}"
	prompt_for add_users\
		"Do you want to add further users?"\
		"validate:boolean"\
		"default:n"
fi

user_blocks=();
if $add_users ; then
	while true ; do

		name=''; prompt_for name\
			"User name (blank to end)"\
			"allow_blank"\
			"validate:/^[a-z_][a-z0-9_-]{0,30}$/"\
			"err:Must be alphanumeric between 1 and 31 characters, starting with a letter"
		[[ -z "$name" ]] && break

		shell=''; prompt_for shell\
			"What shell will $name use? Valid shells are:\n/bin/bash, /bin/zsh, /bin/ksh, /bin/sh, /bin/csh, /bin/tcsh, /sbin/nologin"\
			"default:/bin/bash"\
			"validate:/bin/bash,/bin/zsh,/bin/ksh,/bin/sh,/bin/csh,/bin/tcsh,/sbin/nologin"\
			"err:Please enter one of the shell paths listed above"

		env=''; prompt_for env\
			"Is there a git environment repo for ${name}?  If so, enter it below:"\
			"allow_blank"\
			'validate:/^https?:/(/[a-z0-9\._-]{2,}){3,4}/i' \
			'err:Must be in the form of "http(s)://<host>/<org>/[<project>/]repo"'

		keys=(); prompt_for keys\
			"Enter one or more SSH public keys for ${name}"\
			"list:1+"\
			"validate:/^ssh-rsa AAAA([0-9A-Za-z+/]{4})+([0-9A-Za-z+/]{3}=|[0-9A-Za-z+/]{2}==|[0-9A-Za-z+/]===)?( [^@]+(@[^@]+)?)?$/"\
			"err: Not a valid SSH public key - expecting 'ssh-rsa AAAA.*' with user address on end"

		# Process answers
		keys_json="$(printf "%s\n" "${keys[@]}"|jq -RcMs 'split("\n")|map(select(. != ""))')"
		json="$(jq -ncM\
			--arg n "$name"\
			--arg s "$shell"\
			--argjson k "$keys_json"\
			'{"name": $n, "shell": $s, "ssh_keys": $k}')"
		if [[ -n "$env" ]] ; then
			env_json="$(jq -n --arg e "$env" '{"env": $e}')"
			json="$(echo "$json"$'\n'"$env_json" | jq -s add)"
		fi
		user_blocks+=( "$json" )
		default=0
	done

	color "\nDone entering user access details.\n\n" g
fi

# wrap with output
new_users_json="$(jq -ncM\
  --arg c "$user_comment"\
  --argjson d "$default"\
  --argjson u "$(printf "[%s]\n" "${user_blocks[@]}" | jq -s add)"\
  '[{"comment": $c, "values": [{"users": $u}], "default": $d, "example":null}]')"

# join to existing json
in_json="$( (echo "$in_json";echo "$new_users_json") | jq -s add)"

echo "$in_json" > $outfile
